 #include <iostream> 
 #include <stdio.h> 
 #include <stdbool.h> 
 #include <vector> 
 #include <string> 
 #include <cctype> 
 

using namespace std; 
 int evenCount(const int* a, int size) {  int count = 0; 
 const int* ptr = a; // Pointer to the beginning of the array  for (int i = 0; i < size; ++i) {  if (*ptr % 2 == 0) { // Check if the value pointed by ptr is even  ++count; 
 }  ++ptr; // Move the pointer to the next element  }  return count; 
} bool isMirrored(const int* a, const int* b, int size) {  const int* ptr_a = a; // Pointer to the beginning of the first array  const int* ptr_b = b + size - 1; // Pointer to the end of the second array  while (ptr_a < (a + size)) {  if (*ptr_a != *ptr_b) {  return false; 
 }  ++ptr_a; 
 --ptr_b; 
 }  return true; 
} void sumArrays(const double* arr1, const double* arr2, double* sum, int size) {  for (int i = 0; i < size; ++i) {  sum[i] = arr1[i] + arr2[i]; 
 } } void swap(int* arr6, int* arr7, int size) {  for (int i = 0; i < size; ++i) {  // Swap the elements of the arrays using a temporary variable  int temp = *(arr6 + i);
 *(arr6 + i) = *(arr7 + i);
 *(arr7 + i) = temp;
 } } bool is_in(const int* arr1, const int* arr2, int size1, int size2) {  const int* p1 = arr1;
 const int* p2 = arr2;
 // Iterate over elements of arr1  while (p1 - arr1 < size1) {  bool found = false;
 // Iterate over elements of arr2  while (p2 - arr2 < size2) {  if (*p1 == *p2) {  found = true;
 break;
 }  p2++;
 }  if (!found)  return false;
 p1++;
 }  return true;
} void power(double* n, const int* p) {  double result = 1.0;
 int power = *p;
 // Handle negative powers  if (power < 0) {  *n = 1.0 / *n;
 power *= -1;
 }  // Calculate power using iterative multiplication  for (int i = 0; i < power; i++) {  result *= *n;
 }  *n = result;
} vector<int> addOne(std::vector<int> &v) {  int carry = 1;
 for (int i = v.size() - 1; i >= 0; --i) {  int sum = v[i] + carry;
 v[i] = sum % 10;
 carry = sum / 10;
 }  if (carry) {  // If carry is still remaining, insert it at the beginning of the vector  v.insert(v.begin(), carry);
 }  return v;
} string normalizeString(const string& str) {  string normalized = str;
 if (!normalized.empty()) {  normalized[0] = toupper(normalized[0]); // Capitalize the first letter  for (size_t i = 1; i < normalized.size(); ++i) {  normalized[i] =tolower(normalized[i]); // Convert the rest to lowercase  }  }  return normalized;
} int singleNumber(vector<int>& vec) {  int result = 0;
 for (int num : vec) {  result ^= num; // XOR operation cancels out duplicates  }  return result;
} int main () {  cout << "Problem_1"<< endl; 
 const int SIZE = 10; 
 float *ptr, arr[SIZE], overallGrade = 0.0; 
 float midtermWeight = 0.30; 
 cout << "Enter grades for Midterm exam:" << endl; 
 for (int i = 0; i < SIZE; ++i) {  cout << "Enter grade for student " << i + 1 << ": "; 
 cin >> arr[i]; 
 overallGrade += arr[i]; 
 }  overallGrade *= midtermWeight; 
 cout << "Overall grade for Midterm: " << overallGrade << endl; 
 ptr = arr + SIZE - 1; 
 cout << "Array values in reverse order:" << endl; 
 for (int i = 0; i < SIZE; ++i) {  cout << *ptr << " "; 
 --ptr; 
 }  cout << "Problem_2" << endl; 
 int size; 
 cout << "Enter the size of the array: "; 
 cin >> size;
int array[size]; 
 cout << "Enter " << size << " numbers: "; 
 for (int i = 0; i < size; ++i) {  cin >> array[i]; 
 }  cout << "Number of even numbers in the array: " << evenCount(array, size) << endl; 
 cout <<" Problem_3"<< endl; 
 int size_3; 
 cout << "Enter the size of the arrays: "; 
 cin >> size_3; 
 int array1[size_3], array2[size_3]; 
 cout << "Enter " << size_3 << " numbers for the first array: "; 
 for (int i = 0; i < size_3; ++i) {  cin >> array1[i]; 
 }  cout << "Enter " << size_3 << " numbers for the second array: "; 
 for (int i = 0; i < size_3; ++i) {  cin >> array2[i]; 
 }  if (isMirrored(array1, array2, size_3)) {  cout << "Arrays are mirrored." << endl; 
 } else {  cout << "Arrays are not mirrored." << endl; 
 }  cout << " Problem_4"<< endl; 
 int size_4; 
 cout << "Enter the size of the arrays: "; 
 cin >> size_4; 
 double array_4[size_4], array_5[size_4], sum_4[size_4]; 
 cout << "Enter " << size_4 << " numbers for the first array: "; 
 for (int i = 0; i < size_4; ++i) {  cin >> array_4[i]; 
 }  cout << "Enter " << size_4 << " numbers for the second array: "; 
 for (int i = 0; i < size_4; ++i) {  cin >> array_5[i]; 
 }  sumArrays(array_4, array_5, sum_4, size_4); 
 cout << "Element-wise sum of the arrays:" << endl; 
 for (int i = 0; i < size_4; ++i) {  cout << sum_4[i] << " "; 
 }  cout << endl; 
 cout << " Problem_5" << endl;
 int arr1_5[] = {1, 2, 3, 4, 5};
 int arr2_5[] = {6, 7, 8, 9, 10};
 int size5 = sizeof(arr1_5) / sizeof(arr2_5[0]);
 printf("Before swapping:\n");
 printf("arr1: ");
 for (int i = 0; i < size; i++) {  printf("%d ", arr1_5[i]);
 }  printf("\narr2: ");
 for (int i = 0; i < size; i++) {  printf("%d ", arr2_5[i]);
 }  printf("\n");
 swap(arr1_5, arr2_5, size);
 printf("After swapping:\n");
 printf("arr1: ");
 for (int i = 0; i < size; i++) {  printf("%d ", arr1_5[i]);
 }  printf("\narr2: ");
 for (int i = 0; i < size; i++) {  printf("%d ", arr2_5[i]);
 }  printf("\n");
 cout<< "Problem_6"<< endl;
 int arr1_6[] = {4, 2, 1};
 int arr2_6[] = {7, 4, 2, 2, 1, 5, 6, 1, 6};
 int size1_6 = sizeof(arr1_6) / sizeof(arr1_6[0]);
 int size2_6 = sizeof(arr2_6) / sizeof(arr2_6[0]);
 bool result = is_in(arr1_6, arr2_6, size1_6, size2_6);
 printf("Output: %d\n", result);
 cout << "Problem_7"<< endl;
 double number;
 int exponent;
 // Example 1  number = 5;
 exponent = 3;
 power(&number, &exponent);
 printf("Output: %.0f\n", number); // Output: 125  // Example 2  number = 2;
 exponent = 5;
 power(&number, &exponent);
 printf("Output: %.0f\n", number);
 cout << "Problem_8"<< endl;
 vector<int> v;
 cout << "Input: ";
 int digit;
 while (cin >> digit) {  v.push_back(digit);
 if (cin.get() == '\n')  break;
 }  vector<int> result9 = addOne(v);
 cout << "Output: ";
 for (int num : result9) {  cout << num;
 }  cout << endl;
 v.clear();
 cout << "Input: ";
 while (cin >> digit) {  v.push_back(digit);
 if (cin.get() == '\n')  break;
 }  result9 = addOne(v);
 cout << "Output: ";
 for (int num : result9) {  cout << num;
 } cout << std::endl;
 cout << "Problem_9"<< endl;
 string input;
 cout << "Input: ";
 cin >> input;
 string normalized = normalizeString(input);
 cout << "Output: " << normalized << std::endl;
 cout<< "Problem_10" << endl;
 vector<int> v;
 int t;
 cout << "Input: ";
 while(cin >> t) {  v.push_back(t);
 if (cin.get() == '\n')  break;
 }  cout << "Output: " << singleNumber(v) << endl;
 return 0; 
}
